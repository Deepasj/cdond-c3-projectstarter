version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

docvarnode: &dok_node
    docker:
      - image: circleci/node:13.8.0

docvaraws: &dok_awscli
    docker:
      - image: amazon/aws-cli    

docansibl: &dok_ansible
    docker:
      - image: python:3.7-alpine3.11 
      
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli
      
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"
    
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
          # Your code here
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          # Add when this will run
          command: |
              status=$(curl -H "token: 6fafc41a-e956-4316-abf9-6b4d6a306a94" --request GET https://api.memstash.io/values/migration_status__<<parameters.workflow_id>>)
              echo $status
              if [[ "$status" == "db_success" ]]
              then
                apk add --update tar gzip curl nodejs npm
                npm run migrations:revert
              fi
          # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
          #  SUCCESS = 1
          #  if(( $SUCCESS==1 )); 
          #  then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
          #    exit 1
          #  fi
            
jobs:
  install-backend-dependencies:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules
            
  build-frontend:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      #- restore_cache:
      #    keys: [frontend-build]
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build
      #- run:
      #    name: Build front-end
      #    command: |
      #      cd frontend
      #      npm install
      #      npm run build
      #      npm install
      #      npm run build
      # Your code here
      # exit 1
      #- save_cache:
      #    paths: [frontend/node_modules]
      #    key: frontend-build

  build-backend:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
    #  - restore_cache:
    #      keys: [backend-build]
      - run:
          name: npm run build
          working_directory: ./backend
          command: npm run build
      #- run:
      #    name: Back-end build
      #    command: |
      #       cd backend
      #       npm install
      #       npm run build
     #        npm install
     #        npm run build
     # Your code here
     # exit 1
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
      #- save_cache:
      #    paths: [backend/node_modules]
      #    key: backend-build

  test-frontend:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results
          
    #- restore_cache:
    #    keys: [frontend-test]
    #  - run:
     #     name: frontend test
      #    command: |
       #      cd frontend
        #     npm install
         #    npm run test
                
  test-backend:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results
          
      #- restore_cache:
      #    keys: [backend-test]
      #- run:
      #    name: backend test
      #    command: |
      #       cd backend
      #       npm install
      #       npm run test
            
  scan-frontend:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      #- restore_cache:
      #    keys: [frontend-scan]
      - run:
          name: frontend scan
          working_directory: ./frontend
          command: 
            npm install
            npm audit fix --audit-level=critical  --force
          #command: |
          #   cd frontend
          #   npm install
          #   npm audit fix --audit-level=critical --force
       #      npm audit --audit-level=critical

  scan-backend:
    executor: node
    #docker:
    #  - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      #- restore_cache:
      #    keys: [backend-scan]
      - run:
          name: backend scan
          working_directory: ./backend
          command: npm audit fix --audit-level=critical  --force
          #command: |
          #   cd backend
          #   npm install
          #   npm audit fix --audit-level=critical --force
         #    npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *dok_awscli
    #docker:
    #  - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    environment: 
      MY_STEP_NAME: "Deploy Infrastructure" 
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: install dependancy
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1
          #   --tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1
          #   --tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" > ~/output.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt                 
            echo " ---------"
            cat .circleci/ansible/inventory.txt
            echo " ---------"
            cat ~/output.txt 
          # Your code here
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - output.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    <<: *dok_ansible
    environment: 
      MY_STEP_NAME: "Configure Infrastructure" 
    #docker:
    #  - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ed:53:cc:2a:cf:34:bd:96:01:85:76:a0:05:73:5b:e5"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
         # Your code here
            #exit 1
      - run:
          name: Configure server
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            echo ENVIRONMENT=production > "backend/.env"            
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml            
            cat backend/.env
            ls backend
          # Your code here
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    <<: *dok_node
    environment: 
      MY_STEP_NAME: "Run Migrations"
    #docker:
    #  - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Checkout code from git
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |            
            npm install            
            npm audit fix --force
            npm run build
            npm audit fix --force
            npm run migrations >> migration_output.txt
            cat migration_output.txt
          #command: |
          #  npm update
          #  npm cache clean --force
          #  npm install            
          #  npm audit fix --force
          #  npm run build
          #  npm run migrations >> migration_output.txt
          #  cat migration_output.txt
          #  npm audit fix --force 
          #  npm run build
          # Your code here
          #exit 1
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if [grep -q "executed successfully" migration_output.txt]
            then
              echo "DB migration was successful"
              curl -H "Content-Type: text/plain" -H "token: 7e6f4440-e8d4-41b2-9300-1ff02cd69a88" --request PUT --data "db_success" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, looks like already exists...moving on."
              curl -H "Content-Type: text/plain" -H "token: 7e6f4440-e8d4-41b2-9300-1ff02cd69a88" --request PUT --data "db_failure" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"                    
      - destroy-environment:          
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Your code here
            # exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    <<: *dok_ansible
    #docker:
    #  - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli
          # your code here
      - run:
          name: Get backend url
          command: |
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
        #    export API_URL="http://${BACKEND_IP}:3030"
        #    echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - run:
          name: copy frontend package to aws s3 bucket
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeoplep3-udap-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    <<: *dok_ansible
    environment: 
      MY_STEP_NAME: "Deploy backend"  
    #docker:
    #  - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["94:7c:fd:1a:c4:f5:7c:70:04:20:a2:84:16:33:60:17"]
      - attach_workspace:
          at: ~/
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update ansible zip
            apk add --update openssh-client tar gzip
            pip install awscli
          # your code here
      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            ls
            cd ../
            cd backend/ && tar -zcvf ../backend.tar.gz . && cd - 
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv backend.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend
          command: |
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/node-explorer.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
         # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    <<: *dok_ansible 
    environment: 
      MY_STEP_NAME: "Smoke Test"   
    #docker:
    #  - image: python:3.7-alpine3.11
      # Lightweight Docker image 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
          # your code here
      - run:
          name: Get backend url
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            ls
            cat ~/output.txt
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
          # your code here
      - run:
          name: Backend smoke test.
          command: |
            if curl -s $API_URL/api/status
            then
              return 0
            else
              return 1
            fi
          # your code here
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeoplep3-udap-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/ | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
          # your code here
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    <<: *dok_awscli
    #docker:
    #  - image: amazon/aws-cli
    steps:
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="udap-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
      # Checkout code from git
      #- run:
      #    name: Install dependencies
      #    command: |
      #      # your code here
      #- run:
      #    name: Update cloudfront distribution
      #    command: |
      #      # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: cimg/base:2020.01
      #  Docker image here
    steps:
      - checkout
      - aws-cli/setup
      # Checkout code from git
      - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo "Old Workflow ID: ${OldWorkflowID}"
              if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
              then
                aws s3 rm "s3://udapeople-udap-${CIRCLE_WORKFLOW_ID:5:7}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:5:7}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:5:7}"
              fi
      #- run:
      #    name: Get old stack workflow id
      #    command: |
       # your code here
     #       export OldWorkflowID="the id here"
     #       export STACKS=[] #put the list of stacks here
      #- run:
       #   name: Remove old stacks and files
       #   command: |
       #     if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
       #     then
       #       # your code here
       #     fi
            

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations, deploy-backend]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
